from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from keyboards.dinemic_kb import make_row_keyboard as mrk
from aiogram.fsm.state import StatesGroup, State
from .db import *


greeting = ["–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —É —Ç–µ–±—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é, —Ç–µ–±–µ –∫–æ –º–Ω–µüó≥Ô∏è\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–ª–º–µ–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –Ω–∏–∂–µ."]

router = Router()

class User_data(StatesGroup):
    ID=State()

@router.message(Command('start','choice','menu','help'))
async def cmd_start_menu(message: Message, state: FSMContext):
    try:    
        await state.clear()
        await message.answer(f'{greeting[0]}',reply_markup=mrk(['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è']))
        await state.set_state(User_data.ID)
    except Exception as e: await message.answer(f'–û—à–∏–±–∫–∞ –≤–∏–¥–∞: {e}')    
    

@router.message(User_data.ID, F.text.in_(['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è']))
async def setting_departmant(message: Message, state: FSMContext):
    try:
        if check(message.from_user.id) is True: 
            register_user([str(message.from_user.id)])
            await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüìÖ!',reply_markup=ReplyKeyboardRemove())
            await state.clear()
        else:  
            await message.answer(f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', reply_markup=ReplyKeyboardRemove())
            await state.clear()  #–ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    except Exception as e: await message.answer(f'–û—à–∏–±–∫–∞ –≤–∏–¥–∞: {e}')        